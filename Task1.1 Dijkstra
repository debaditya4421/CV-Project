
import numpy as np
import cv2

prob=np.random.randint(20,31)
img=np.full((20,20),255).astype(np.uint8)
count=0
while(count<4*prob):
    i=np.random.randint(0,20)
    j=np.random.randint(0,20)
    if(img[i,j]!=0):    #checking for repitition
        count+=1
        img[i,j]=0

img=cv2.resize(src=img,dsize=(60,60),interpolation=cv2.INTER_AREA)
n=0
pos1 = []
pos2 = []
while ( n < 2 ):
    i=np.random.randint(0,60)
    j=np.random.randint(0,60)
    if (img[i,j]==255):    #checking for a white pixel
        pos1.append(i)
        pos2.append(j)
        n+=1
        img[i,j]=127
n, m = img.shape
a = pos1[0]
b = pos2[0]
c = pos1[1]
d = pos2[1]
cv2.namedWindow('Image', cv2.WINDOW_NORMAL)
cv2.imshow('Image', img)

img[a][b] = 255
img[c][d] = 255

temp = np.full((n, m), 0)
per = np.full((n, m), 0)
vis = np.full((n, m), 0)
infi = float('inf')
for i in range(n):
    for j in range(m):
        temp[i][j]=10000
temp[a][b] = 0
a1=a
b1 = b
c1=c
d1=d
for i in range(n):
    for j in range(m):
        if img[i][j] == 0:
            vis[i][j] = 127

#vis[i][j] == 0 >> min of them >> temp
# print(2>infi)
# print(2<3)
# temp[2][4] = -2
# print(temp[2][4])
# def wt(g1,h1,p1,q1):
#     if (g1==p1) or (h1==q1):
#         return 2
#     else:
#         return 1


def algo(p,q):
    if (p>0) and (img[p-1][q]==255):
        if 2+temp[p][q] < temp[p-1][q] :
            temp[p-1][q] = 2+temp[p][q]
    if (q>0) and (img[p][q-1]==255):
        if 2+temp[p][q] < temp[p][q-1] :
            temp[p][q-1] = 2+temp[p][q]
    if (p+1<n) and (img[p+1][q]==255):
        if 2+temp[p][q] < temp[p+1][q] :
            temp[p+1][q] = 2+temp[p][q]
    if (q+1<m) and (img[p][q+1]==255):
        if 2+temp[p][q] < temp[p][q+1] :
            temp[p][q+1] = 2+temp[p][q]
    if (p + 1 < n) and (q+1<m) and (img[p + 1][q+1] == 255):
        if 1 + temp[p][q] < temp[p+1][q + 1]:
            temp[p+1][q + 1] = 1 + temp[p][q]
    if (p + 1 < n) and (q>0) and (img[p + 1][q-1] == 255):
        if 1 + temp[p][q] < temp[p+1][q - 1]:
            temp[p+1][q - 1] = 1 + temp[p][q]
    if (q+1<m) and (p>0) and (img[p - 1][q+1] == 255):
        if 1 + temp[p][q] < temp[p-1][q + 1]:
            temp[p-1][q + 1] = 1 + temp[p][q]
    if (p > 0) and (q>0) and (img[p - 1][q-1] == 255):
        if 1+ temp[p][q] < temp[p-1][q - 1]:
            temp[p-1][q - 1] = 1 + temp[p][q]
    vis[p][q] = 127
    per[p][q] = temp[p][q]

g = 5
ct = 0
min = temp[0][0]
while g==5 :
    ct=0
    for i in range(n):
        for j in range(m):
            if vis[i][j] == 0:
                ct = ct+1
    print(ct)
    min = 10000
    i1=-1
    j1=-1
    for i in range(n):
        for j in range(m):
            if vis[i][j] == 0 :
                if temp[i][j]<min :
                    min = temp[i][j]
                    i1=i
                    j1=j
    if ct>0 :
        algo(i1, j1)


    if ct==0:
        g=10

print(per[a][b])
print(per[c][d])
z=30

img[c1][d1]=127
def path(x,y):
    global z
    if (x > 0) and (img[x - 1][y] == 255) and (2+ per[x - 1][y] == per[x][y]):
        img[x - 1][y] = 127
        c=x-1
        d=y

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (y > 0) and (img[x][y - 1] == 255) and (2+ per[x][y - 1] == per[x][y]):
        img[x][y - 1] = 127
        c=x
        d=y-1

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (x + 1 < n) and (img[x + 1][y] == 255) and (2 + per[x + 1][y] == per[x][y]):
        img[x + 1][y] = 127
        c = x + 1
        d = y

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (y + 1 < m) and (img[x][y + 1] == 255) and (2 + per[x][y + 1] == per[x][y]):
        img[x][y + 1] = 127
        c = x
        d = y+1

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (y + 1 < m) and (x+1<n) and (img[x+1][y + 1] == 255) and (1 + per[x+1][y + 1]==per[x][y]):
        img[x+1][y + 1] = 127
        c = x+1
        d = y+1

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (y + 1 < m) and (x>0) and (img[x-1][y + 1] == 255) and (1 + per[x-1][y + 1]==per[x][y]):
        img[x-1][y + 1] = 127
        c = x-1
        d = y+1

        # cv2.imshow('NewImage', img)
        # cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (y > 0) and (x>0) and (img[x-1][y - 1] == 255) and (1 + per[x-1][y - 1]==per[x][y]):
        img[x-1][y - 1] = 127
        c = x-1
        d = y-1

        #cv2.imshow('NewImage', img)
        #cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15
    elif (x + 1 < n) and (y>0) and (img[x+1][y - 1] == 255) and (1 + per[x+1][y - 1]==per[x][y]):
        img[x+1][y - 1] = 127
        c = x+1
        d = y-1

        #cv2.imshow('NewImage', img)
        #cv2.waitKey(100)
        if (c == a1) and (d == b1):
            z=15

while z==30 :

    path(c, d)
cv2.namedWindow('NewImage', cv2.WINDOW_NORMAL)
cv2.imshow('NewImage', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
